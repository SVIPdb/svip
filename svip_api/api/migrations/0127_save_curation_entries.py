# Generated by Django 2.2.24 on 2021-07-01 16:01

from django.db import migrations


def save_curations(apps, schema_editor):
    """
    For each curation entry, create CurationAssociation and CurationEvidences, and associate the evidence with the relevant curation.
    Django signals that create CurationAssociation and CurationEvidence instances are copied here (can't be called, in case of later modification)
    """

    CurationEntry = apps.get_model('api', 'CurationEntry')
    CurationAssociation = apps.get_model('api', 'CurationAssociation')
    CurationEvidence = apps.get_model('api', 'CurationEvidence')
    
    
    for instance in CurationEntry.objects.all():
        
        # check that a disease is indicated for the curation entry being saved
        if instance.disease and (instance.type_of_evidence in ["Prognostic", "Diagnostic", "Predictive / Therapeutic"]):
            associations = CurationAssociation.objects.filter(
                variant=instance.variant).filter(disease=instance.disease)

            # check that no association already exists for these parameters
            if len(associations) == 0:
                new_curation_association = CurationAssociation(
                    variant=instance.variant, disease=instance.disease)
                new_curation_association.save()
                
                for evidence in ["Prognostic", "Diagnostic", "Predictive / Therapeutic"]:
                    new_curation_evidence = CurationEvidence(
                        association=new_curation_association,
                        type_of_evidence=evidence,
                        annotated_effect="Not yet annotated",
                        annotated_tier="Not yet annotated"
                    )
                    new_curation_evidence.save()
                
                instance.curation_evidence = new_curation_association.curation_evidences.get(type_of_evidence=instance.type_of_evidence)

            # association already exists so simply need to associate the curation entry to the right curation evidence
            else:
                evidence = associations.first().curation_evidences.get(
                    type_of_evidence=instance.type_of_evidence)
                instance.curation_evidence = evidence
        
        instance.save()


def drop_instances(apps, schema_editor):
    """
    Delete all CurationAssociation and CurationEvidence
    """

    CurationEntry = apps.get_model('api', 'CurationEntry')
    CurationAssociation = apps.get_model('api', 'CurationAssociation')
    CurationEvidence = apps.get_model('api', 'CurationEvidence')
    
    for curation in CurationEntry.objects.all():
        curation.curation_evidence = None
        curation.save()
    CurationEvidence.objects.all().delete()
    CurationAssociation.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0126_auto_20210701_1456'),
    ]

    operations = [
        migrations.RunPython(save_curations, reverse_code=drop_instances)
    ]
